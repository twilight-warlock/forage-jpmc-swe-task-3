From a8bfc857a0794218d63acf9a5d5d81e33d90b9bc Mon Sep 17 00:00:00 2001
From: twilight-warlock <shahdevansh045@gmail.com>
Date: Thu, 1 Jun 2023 15:08:32 +0530
Subject: [PATCH] updated with changes

---
 src/DataManipulator.ts |  44 +++++++++++-----
 src/Graph.tsx          | 113 +++++++++++++++++++++++------------------
 2 files changed, 93 insertions(+), 64 deletions(-)

diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index 7f62295..27bea37 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,36 @@
-import { ServerRespond } from './DataStreamer';
+import { ServerRespond } from "./DataStreamer";
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
-  timestamp: Date,
+	price_abc: number;
+	price_def: number;
+	ratio: number;
+	upper_bound: number;
+	lower_bound: number;
+	trigger_alert: number | undefined;
+	timestamp: Date;
 }
 
-
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]) {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
-  }
+	static generateRow(serverRespond: ServerRespond[]): Row {
+		const priceABC =
+			(serverRespond[0].top_ask.price + serverRespond[0].top_bid.price) / 2;
+		const priceDEF =
+			(serverRespond[1].top_ask.price + serverRespond[1].top_bid.price) / 2;
+		const ratio = priceABC / priceDEF;
+		const upperBound = 1 + 0.05;
+		const lowerBound = 1 - 0.05;
+		return {
+			price_abc: priceABC,
+			price_def: priceDEF,
+			ratio,
+			timestamp:
+				serverRespond[0].timestamp > serverRespond[1].timestamp
+					? serverRespond[0].timestamp
+					: serverRespond[1].timestamp,
+			upper_bound: upperBound,
+			lower_bound: lowerBound,
+			trigger_alert:
+				ratio > upperBound || ratio < lowerBound ? ratio : undefined,
+		};
+	}
 }
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 277797d..65259df 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,60 +1,73 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
-import { DataManipulator } from './DataManipulator';
-import './Graph.css';
+import React, { Component } from "react";
+import { Table, TableData } from "@finos/perspective";
+import { ServerRespond } from "./DataStreamer";
+import { DataManipulator } from "./DataManipulator";
+import "./Graph.css";
 
 interface IProps {
-  data: ServerRespond[],
+	data: ServerRespond[];
 }
 
 interface PerspectiveViewerElement extends HTMLElement {
-  load: (table: Table) => void,
+	load: (table: Table) => void;
 }
 class Graph extends Component<IProps, {}> {
-  table: Table | undefined;
-
-  render() {
-    return React.createElement('perspective-viewer');
-  }
-
-  componentDidMount() {
-    // Get element from the DOM.
-    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
-    const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
-
-    if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
-    }
-    if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
-      elem.load(this.table);
-      elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
-      elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
-      elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
-        timestamp: 'distinct count',
-      }));
-    }
-  }
-
-  componentDidUpdate() {
-    if (this.table) {
-      this.table.update(
-        DataManipulator.generateRow(this.props.data),
-      );
-    }
-  }
+	table: Table | undefined;
+
+	render() {
+		return React.createElement("perspective-viewer");
+	}
+
+	componentDidMount() {
+		// Get element from the DOM.
+		const elem = (document.getElementsByTagName(
+			"perspective-viewer"
+		)[0] as unknown) as PerspectiveViewerElement;
+
+		const schema = {
+			price_abc: "float",
+			price_def: "float",
+			ratio: "float",
+			upper_bound: "float",
+			lower_bound: "float",
+			trigger_alert: "float",
+			timestamp: "date",
+		};
+
+		if (window.perspective && window.perspective.worker()) {
+			this.table = window.perspective.worker().table(schema);
+		}
+		if (this.table) {
+			// Load the `table` in the `<perspective-viewer>` DOM reference.
+			elem.load(this.table);
+			elem.setAttribute("view", "y_line");
+			elem.setAttribute("row-pivots", '["timestamp"]');
+			elem.setAttribute(
+				"columns",
+				'["ratio", "lower_bound", "upper_bound", "trigger_alert"]'
+			);
+			elem.setAttribute(
+				"aggregates",
+				JSON.stringify({
+					price_abc: "avg",
+					price_def: "avg",
+					ratio: "avg",
+					upper_bound: "avg",
+					lower_bound: "avg",
+					trigger_alert: "avg",
+					timestamp: "distinct count",
+				})
+			);
+		}
+	}
+
+	componentDidUpdate() {
+		if (this.table) {
+			this.table.update(([
+				DataManipulator.generateRow(this.props.data),
+			] as unknown) as TableData);
+		}
+	}
 }
 
 export default Graph;
-- 
2.33.1.windows.1

